@model SantaFeWaterSystem.ViewModels.ResetPasswordViewModel

@{
    ViewData["Title"] = "Reset Password";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <style>
        .reset-container {
            max-width: 500px;
            margin: 40px auto;
        }

        .card-custom {
            border: none;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        }

        .form-label i {
            margin-right: 6px;
        }

        .toggle-password {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
        }

        .position-relative input {
            padding-right: 2.5rem;
        }

        .password-strength {
            font-size: 0.85rem;
        }

        .weak {
            color: red;
        }

        .medium {
            color: orange;
        }

        .strong {
            color: green;
        }
    </style>
}

<div class="reset-container">
    <div class="card card-custom rounded-3">
        <div class="card-header bg-danger text-white text-center">
            <h4 class="mb-0"><i class="bi bi-key-fill me-2"></i>Reset Password</h4>
        </div>

        <div class="card-body">

            @if (TempData["Message"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="bi bi-check-circle-fill me-2"></i>@TempData["Message"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <form asp-action="ResetPassword" method="post" novalidate>
                @Html.AntiForgeryToken()

                <div class="mb-3 position-relative">
                    <label asp-for="NewPassword" class="form-label fw-bold">
                        <i class="bi bi-lock-fill"></i> New Password
                    </label>
                    <input asp-for="NewPassword" type="password" class="form-control" id="newPassword" placeholder="Enter new password" />
                    <i class="bi bi-eye-slash toggle-password" toggle="#newPassword"></i>
                    <span asp-validation-for="NewPassword" class="text-danger small"></span>
                    <div id="passwordStrength" class="password-strength mt-1"></div>
                </div>

                <div class="mb-3 position-relative">
                    <label asp-for="ConfirmPassword" class="form-label fw-bold">
                        <i class="bi bi-lock"></i> Confirm Password
                    </label>
                    <input asp-for="ConfirmPassword" type="password" class="form-control" id="confirmPassword" placeholder="Confirm new password" />
                    <i class="bi bi-eye-slash toggle-password" toggle="#confirmPassword"></i>
                    <span asp-validation-for="ConfirmPassword" class="text-danger small"></span>
                </div>

                <div class="d-grid gap-2 mt-4">
                    <button type="submit" class="btn btn-danger">
                        <i class="bi bi-shield-lock-fill"></i> Reset Password
                    </button>
                    <a asp-action="Profile" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left-circle"></i> Back to Profile
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Show/Hide password toggle
        document.querySelectorAll('.toggle-password').forEach(icon => {
            icon.addEventListener('click', function () {
                const input = document.querySelector(this.getAttribute('toggle'));
                const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                input.setAttribute('type', type);
                this.classList.toggle('bi-eye');
                this.classList.toggle('bi-eye-slash');
            });
        });

        // Password strength meter
        const passwordInput = document.getElementById('newPassword');
        const strengthText = document.getElementById('passwordStrength');

        passwordInput.addEventListener('input', function () {
            const val = this.value;
            let strength = '';
            let colorClass = '';

            if (val.length >= 8 && /[A-Z]/.test(val) && /\d/.test(val) && /[\W_]/.test(val)) {
                strength = 'Strong';
                colorClass = 'strong';
            } else if (val.length >= 6 && /[A-Z]/.test(val) && /\d/.test(val)) {
                strength = 'Medium';
                colorClass = 'medium';
            } else if (val.length > 0) {
                strength = 'Weak';
                colorClass = 'weak';
            }

            strengthText.textContent = strength;
            strengthText.className = 'password-strength ' + colorClass;
        });
    </script>
}
