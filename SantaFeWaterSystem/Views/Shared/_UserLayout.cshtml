@using System.Security.Claims
@inject IHttpContextAccessor HttpContextAccessor
@inject SantaFeWaterSystem.Data.ApplicationDbContext _context

@{
    Layout = null;
    var currentController = ViewContext.RouteData.Values["controller"]?.ToString() ?? "";
    var currentAction = ViewContext.RouteData.Values["action"]?.ToString() ?? "";
    var isFeedbackActive = currentController == "Feedback";
    var unreadCount = ViewBag.UnreadNotifications as int? ?? 0;
    var userIdClaim = HttpContextAccessor.HttpContext?.User.FindFirst("UserId")?.Value;

    int userId = 0;
    string fullName = "User";
    bool is2FAEnabled = false;
    string profilePic = "default.png"; // Default until we fetch the correct one
    string consumerStatus = "Unknown";
    string statusClass = "bg-secondary"; // Default badge class

    if (int.TryParse(userIdClaim, out userId))
    {
        var user = _context.Users.FirstOrDefault(u => u.Id == userId);
        if (user != null)
        {
            is2FAEnabled = user.IsMfaEnabled;
        }

        var consumer = _context.Consumers.FirstOrDefault(c => c.UserId == userId);
        if (consumer != null)
        {
            fullName = $"{consumer.FirstName} {consumer.LastName}";
            profilePic = consumer.ProfilePicture ?? "default.png";
            consumerStatus = consumer.Status ?? "Unknown";

            // Apply badge color based on status
            statusClass = consumerStatus switch
            {
                "Active" => "bg-success",
                "Disconnected" => "bg-danger",
                "Pending" => "bg-warning text-dark",
                _ => "bg-secondary"
            };
        }
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"] - Santa Fe Water Billing</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/userlayout.css" asp-append-version="true" />
    @RenderSection("Styles", required: false)
</head>
<body>

    @* Toast Notification *@
    @if (TempData["SuccessMessage"] != null || TempData["ErrorMessage"] != null)
    {
        <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;">
            <div class="toast align-items-center text-bg-@((TempData["SuccessMessage"] != null) ? "success" : "danger") border-0" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body">
                        @TempData["SuccessMessage"] ?? TempData["ErrorMessage"]
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        </div>
    }

    <!-- Navbar -->
    <nav class="navbar navbar-dark bg-primary fixed-top d-flex justify-content-between align-items-center px-3" style="height: 56px;">
        <div class="d-flex align-items-center gap-2">
            <button class="btn btn-outline-light d-lg-none" id="sidebarToggle" aria-label="Toggle navigation" aria-expanded="false" aria-controls="sidebar" type="button">
                <i class="bi bi-list"></i>
            </button>

            <button class="btn btn-outline-light d-none d-lg-inline-flex me-2" id="collapseSidebarBtn" aria-label="Toggle sidebar collapse" type="button" title="Collapse Sidebar">
                <i class="bi bi-chevron-left"></i>
            </button>

            <button class="btn btn-outline-light btn-sm d-flex align-items-center" id="darkModeToggle" aria-label="Toggle dark mode" type="button" title="Toggle Dark Mode">
                <i class="bi bi-moon-fill"></i>
            </button>

            <!-- ✅ Mobile-only Notification & Support Icons -->
            <div class="d-lg-none d-flex align-items-center gap-1">
                <a id="notificationBellMobile" asp-controller="Notifications" asp-action="UserNotification"
                   class="btn btn-outline-light btn-sm position-relative d-lg-none" title="My Notifications">
                    <i class="bi bi-bell"></i>
                    <span id="notificationBadgeMobile"
                          class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger d-none">
                        <span id="notifCountMobile">0</span>
                        <span class="visually-hidden">unread notifications</span>
                    </span>
                </a>


                <a asp-controller="Supports" asp-action="UserSupport"
                   class="btn btn-outline-light btn-sm position-relative d-inline-flex d-lg-none"
                   id="supportButtonMobile" title="Support">
                    <i class="bi bi-life-preserver"></i>
                    <span id="supportBadgeMobile"
                          class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger d-none"
                          style="font-size: 0.7rem;">
                        <span id="supportNotifCountMobile">0</span>
                        <span class="visually-hidden">unseen replies</span>
                    </span>
                </a>

            </div>
        </div>

        <!-- Desktop View -->
        <div class="d-none d-lg-flex align-items-center gap-2">
            <a href="@Url.Action("Profile", "User")" title="View Profile">
                <img src="@Url.Content("~/images/profiles/" + profilePic)"
                     onerror="this.onerror=null;this.src='@Url.Content("~/images/profiles/default.png")';"
                     class="rounded-circle border border-light"
                     style="width: 36px; height: 36px; object-fit: cover; cursor: pointer;" />
            </a>

            <span class="text-white small fw-medium">Hello, @fullName</span>
            <span class="badge @statusClass ms-2">@consumerStatus</span>

            <a id="notificationBell"
               asp-controller="Notifications"
               asp-action="UserNotification"
               class="btn btn-outline-light btn-sm position-relative d-none d-lg-inline-flex"
               title="My Notifications">
                <i class="bi bi-bell me-1"></i> Notifications
                <span id="notificationBadge"
                      class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger d-none"
                      style="font-size: 0.7rem;">
                    <span id="notifCount">0</span>
                    <span class="visually-hidden">unread notifications</span>
                </span>
            </a>

            <a asp-controller="Supports" asp-action="UserSupport"
               class="btn btn-outline-light btn-sm position-relative d-none d-lg-inline-flex"
               id="supportButtonDesktop" title="Support">
                <i class="bi bi-life-preserver me-1"></i> Support
                <span id="supportBadgeDesktop"
                      class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger d-none"
                      style="font-size: 0.7rem;">
                    <span id="supportNotifCountDesktop">0</span>
                    <span class="visually-hidden">unseen replies</span>
                </span>
            </a>

            <a href="@Url.Action("Index", "ConsumerSetting")" class="btn btn-outline-light btn-sm">
                <i class="bi bi-gear me-1"></i> Settings
            </a>

            <!-- Trigger Logout Modal -->
            <button class="btn btn-outline-danger btn-sm" type="button" data-bs-toggle="modal" data-bs-target="#logoutModal">
                <i class="bi bi-box-arrow-right"></i> Logout
            </button>
        </div>


        <!-- Mobile Dropdown View -->
        <div class="dropdown d-lg-none">
            <button class="btn btn-outline-light dropdown-toggle btn-sm d-flex align-items-center" type="button" id="userMenu" data-bs-toggle="dropdown" aria-expanded="false">
                <img src="@Url.Content("~/images/profiles/" + profilePic)"
                     onerror="this.onerror=null;this.src='@Url.Content("~/images/profiles/default.png")';"
                     class="rounded-circle border border-light me-2"
                     style="width: 28px; height: 28px; object-fit: cover;" />
                <span class="d-none d-sm-inline text-white small">@fullName</span>
            </button>

            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userMenu">
                <li><h6 class="dropdown-header">Hello, @fullName</h6></li>
                <li class="dropdown-item disabled d-flex align-items-center">
                    <span class="me-2">Status:</span>
                    <span class="badge @statusClass">@consumerStatus</span>
                </li>
                <li>
                    <a class="dropdown-item" href="@Url.Action("Profile", "User")">
                        <i class="bi bi-person-circle me-1"></i> Profile
                    </a>
                </li>
                <li>
                    <a class="dropdown-item" href="@Url.Action("Index", "ConsumerSetting")">
                        <i class="bi bi-gear me-1"></i> Settings
                    </a>
                </li>
                <li>
                    <!-- Trigger Modal -->
                    <button class="dropdown-item text-danger" type="button" data-bs-toggle="modal" data-bs-target="#logoutModal">
                        <i class="bi bi-box-arrow-right me-2"></i> Logout
                    </button>
                </li>
            </ul>
        </div>
    </nav>

    <!-- Logout Confirmation Modal -->
    <div class="modal fade" id="logoutModal" tabindex="-1" aria-labelledby="logoutModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow-lg">

                <!-- Header -->
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title d-flex align-items-center" id="logoutModalLabel">
                        <i class="bi bi-box-arrow-right me-2"></i> Confirm Logout
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <!-- Body -->
                <div class="modal-body text-center">
                    <i class="bi bi-exclamation-triangle-fill text-warning fs-1 mb-3"></i>
                    <p class="fs-5">Are you sure you want to <strong>log out</strong> of your account?</p>
                </div>

                <!-- Footer -->
                <div class="modal-footer justify-content-center">
                    <form method="post" asp-controller="Account" asp-action="Logout">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-danger px-4">
                            <i class="bi bi-box-arrow-right me-1"></i> Yes, Logout
                        </button>
                    </form>
                    <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-1"></i> Cancel
                    </button>
                </div>

            </div>
        </div>
    </div>


    <!-- Sidebar -->
    <aside class="sidebar" id="sidebar" role="navigation" aria-label="Sidebar navigation">
        <ul class="nav flex-column">
            <li class="nav-item">
                <a class="nav-link @((currentController == "User" && currentAction == "Dashboard") ? "active" : "")" asp-controller="User" asp-action="Dashboard">
                    <i class="bi bi-speedometer2 me-2"></i> Dashboard
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link @((currentController == "User" && currentAction == "BillingHistory") ? "active" : "")" asp-controller="User" asp-action="BillingHistory">
                    <i class="bi bi-receipt me-2"></i> Billing History
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link @((currentController == "User" && currentAction == "Payment") ? "active" : "")" asp-controller="User" asp-action="Payment">
                    <i class="bi bi-credit-card me-2"></i> Payment
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link @((currentController == "User" && currentAction == "Profile") ? "active" : "")" asp-controller="User" asp-action="Profile">
                    <i class="bi bi-person-circle me-2"></i> Profile
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link @((currentController == "User" && currentAction == "Support") ? "active" : "")" asp-controller="User" asp-action="Support">
                    <i class="bi bi-headset me-2"></i> Support
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link @((currentController == "Announcement" && currentAction == "Index") ? "active" : "")"
                   asp-controller="Announcement" asp-action="Index">
                    <i class="bi bi-megaphone me-2"></i> Community Feed
                </a>
            </li>
        </ul>
    </aside>

    <!-- Overlay -->
    <div class="overlay-backdrop" id="overlayBackdrop"></div>

    <!-- Main Content -->
    <main class="content" role="main">
        @RenderBody()
        @RenderSection("Scripts", required: false)
    </main>

    <!-- ✅ Cookie Consent Banner (moved near footer) -->
    <partial name="_CookieConsentPartial" />

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate-unobtrusive/4.0.0/jquery.validate.unobtrusive.min.js"></script>

    <script>
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('overlayBackdrop');
        const toggleBtn = document.getElementById('sidebarToggle');
        const collapseBtn = document.getElementById('collapseSidebarBtn');
        const darkModeToggle = document.getElementById('darkModeToggle');
        const content = document.querySelector('main.content');

        // Auto-dismiss toast
        const toastEl = document.querySelector('.toast');
        if (toastEl) {
            const bsToast = new bootstrap.Toast(toastEl, { delay: 5000 });
            bsToast.show();
        }

               document.addEventListener('DOMContentLoaded', () => {
            // Sidebar collapsed preference
            const isCollapsed = localStorage.getItem('sidebarCollapsed') === 'true';
            if (isCollapsed) {
                sidebar.classList.add('collapsed');
                content.classList.add('collapsed');
                const icon = collapseBtn.querySelector('i');
                icon.classList.remove('bi-chevron-left');
                icon.classList.add('bi-chevron-right');
            }

            // Dark mode preference logic with system fallback
            const icon = darkModeToggle.querySelector('i');
            const text = darkModeToggle.querySelector('span'); // make sure your button has <span> for the text

            let darkMode = localStorage.getItem('darkMode');

            if (darkMode === null) {
                const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                darkMode = systemPrefersDark ? 'true' : 'false';
            }

            const isDark = darkMode === 'true';
            document.body.classList.toggle('dark-mode', isDark);

            icon.classList.toggle('bi-moon-fill', !isDark);
            icon.classList.toggle('bi-sun-fill', isDark);
            if (text) {
                text.textContent = isDark ? 'Light Mode' : 'Dark Mode';
            }
        });


        collapseBtn.addEventListener('click', () => {
            const isNowCollapsed = sidebar.classList.toggle('collapsed');
            content.classList.toggle('collapsed');
            const icon = collapseBtn.querySelector('i');
            icon.classList.toggle('bi-chevron-left', !isNowCollapsed);
            icon.classList.toggle('bi-chevron-right', isNowCollapsed);
            localStorage.setItem('sidebarCollapsed', isNowCollapsed);
        });

               darkModeToggle.addEventListener('click', () => {
            const isDark = document.body.classList.toggle('dark-mode');
            const icon = darkModeToggle.querySelector('i');
            const text = darkModeToggle.querySelector('span');

            icon.classList.toggle('bi-moon-fill', !isDark);
            icon.classList.toggle('bi-sun-fill', isDark);
            if (text) {
                text.textContent = isDark ? 'Light Mode' : 'Dark Mode';
            }

            localStorage.setItem('darkMode', isDark);
        });


        function checkSidebarOnResize() {
            if (window.innerWidth >= 992) {
                sidebar.classList.remove('show');
                overlay.classList.remove('show');
                toggleBtn.setAttribute('aria-expanded', false);
            }
        }
        checkSidebarOnResize();
        window.addEventListener('resize', checkSidebarOnResize);

        toggleBtn.addEventListener('click', () => {
            const isShown = sidebar.classList.toggle('show');
            overlay.classList.toggle('show', isShown);
            toggleBtn.setAttribute('aria-expanded', isShown);
        });

        overlay.addEventListener('click', () => {
            sidebar.classList.remove('show');
            overlay.classList.remove('show');
            toggleBtn.setAttribute('aria-expanded', false);
        });

               document.querySelectorAll('#sidebar .nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                const isToggleLink = link.getAttribute('data-bs-toggle') === 'collapse';
                if (window.innerWidth < 992 && !isToggleLink) {
                    sidebar.classList.remove('show');
                    overlay.classList.remove('show');
                    toggleBtn.setAttribute('aria-expanded', false);
                }
            });
        });


        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                sidebar.classList.remove('show');
                overlay.classList.remove('show');
                toggleBtn.setAttribute('aria-expanded', false);
            }
        });
    </script>

    <script>
        const publicVapidKey = "BA_B1RL8wfVkIA7o9eZilYNt7D0_CbU5zsvqCZUFcCnVeqFr6a9BPxHPtWlNNgllEkEqk6jcRgp02ypGhGO3gZI";

        document.addEventListener("DOMContentLoaded", async () => {
            if ('serviceWorker' in navigator && 'PushManager' in window) {
                try {
                    // ✅ Register service worker
                    const registration = await navigator.serviceWorker.register('/service-worker.js');
                    console.log("✅ Service Worker registered.");

                    // ✅ Ask for notification permission
                    const permission = await Notification.requestPermission();
                    if (permission !== "granted") {
                        console.warn("❌ Notification permission not granted.");
                        return;
                    }

                    // ✅ Subscribe for push
                    const subscription = await registration.pushManager.subscribe({
                        userVisibleOnly: true,
                        applicationServerKey: urlBase64ToUint8Array(publicVapidKey)
                    });

                    console.log("📬 Push subscription:", subscription);

                    // ✅ Send to server
                    const response = await fetch("/BillNotification/SaveSubscription", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            endpoint: subscription.endpoint,
                            keys: subscription.toJSON().keys
                        })
                    });

                    if (response.ok) {
                        console.log("📩 Push subscription saved successfully.");
                    } else {
                        console.error("❌ Failed to save subscription.");
                    }

                } catch (err) {
                    console.error("🚫 Error during push setup:", err);
                }
            } else {
                console.warn("🚫 Push messaging is not supported.");
            }
        });

        function urlBase64ToUint8Array(base64String) {
            const padding = '='.repeat((4 - base64String.length % 4) % 4);
            const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
            const rawData = atob(base64);
            return new Uint8Array([...rawData].map(char => char.charCodeAt(0)));
        }
    </script>

    <script>
        async function updateNotificationBadge() {
            try {
                const response = await fetch('/Notifications/GetUnreadCount');
                const count = await response.json();

                const desktopBadge = document.getElementById('notificationBadge');
                const desktopCount = document.getElementById('notifCount');

                const mobileBadge = document.getElementById('notificationBadgeMobile');
                const mobileCount = document.getElementById('notifCountMobile');

                if (count > 0) {
                    if (desktopBadge && desktopCount) {
                        desktopCount.textContent = count;
                        desktopBadge.classList.remove('d-none');
                    }
                    if (mobileBadge && mobileCount) {
                        mobileCount.textContent = count;
                        mobileBadge.classList.remove('d-none');
                    }
                } else {
                    if (desktopBadge) desktopBadge.classList.add('d-none');
                    if (mobileBadge) mobileBadge.classList.add('d-none');
                }
            } catch (error) {
                console.error('Failed to update notification badge:', error);
            }
        }

        // Load on page ready + update every 30 seconds
        document.addEventListener("DOMContentLoaded", function () {
            updateNotificationBadge();
            setInterval(updateNotificationBadge, 30000);
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Fetch unseen replies
            fetch('/Supports/GetUnseenRepliesCount')
                .then(response => response.json())
                .then(data => {
                    const count = data.count;

                    // Desktop
                    const desktopBadge = document.getElementById('supportBadgeDesktop');
                    const desktopCount = document.getElementById('supportNotifCountDesktop');

                    // Mobile
                    const mobileBadge = document.getElementById('supportBadgeMobile');
                    const mobileCount = document.getElementById('supportNotifCountMobile');

                    if (count > 0) {
                        if (desktopBadge && desktopCount) {
                            desktopBadge.classList.remove('d-none');
                            desktopCount.textContent = count;
                        }

                        if (mobileBadge && mobileCount) {
                            mobileBadge.classList.remove('d-none');
                            mobileCount.textContent = count;
                        }
                    } else {
                        if (desktopBadge) desktopBadge.classList.add('d-none');
                        if (mobileBadge) mobileBadge.classList.add('d-none');
                    }
                })
                .catch(error => console.error('Error fetching unseen replies count:', error));
        });
    </script>


    <form id="antiForgeryForm" method="post">
        @Html.AntiForgeryToken()
    </form>




</body>
</html>
