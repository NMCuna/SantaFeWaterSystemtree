@model IPagedList<Notification>
@using X.PagedList.Mvc.Core
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Archived Notifications";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    // Filters
    var searchTerm = ViewBag.SearchTerm as string;
    var selectedMonth = ViewBag.SelectedMonth as int?;
    var selectedYear = ViewBag.SelectedYear as int?;

    int currentPage = ViewBag.CurrentPage;
    int pageSize = ViewBag.PageSize;
    int totalPages = ViewBag.TotalPages;
    int maxPagesToShow = 5;

    int startPage = Math.Max(1, currentPage - maxPagesToShow / 2);
    int endPage = Math.Min(totalPages, startPage + maxPagesToShow - 1);
    if ((endPage - startPage + 1) < maxPagesToShow)
    {
        startPage = Math.Max(1, endPage - maxPagesToShow + 1);
    }

    int previewLength = 100;
}

<style>
    .archived-header {
        font-size: 1.8rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
    }

    .table-notifications {
        background-color: #fff;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 0 15px rgba(0,0,0,0.05);
    }

        .table-notifications th {
            background-color: #f8f9fa;
            font-weight: 600;
            text-align: center;
        }

        .table-notifications td {
            vertical-align: middle;
            text-align: center;
        }

    .btn-info {
        color: white;
    }

    .back-button {
        margin-bottom: 20px;
    }

    .pagination {
        margin-top: 20px;
    }
</style>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center archived-header">
        <div><i class="bi bi-archive-fill me-2"></i>Archived Notifications</div>
        <a class="btn btn-secondary back-button" asp-action="Index"
           asp-route-searchTerm="@searchTerm"
           asp-route-selectedMonth="@selectedMonth"
           asp-route-selectedYear="@selectedYear"
           asp-route-page="@currentPage">
            <i class="bi bi-arrow-left-circle me-1"></i>Back to Active Notifications
        </a>
    </div>

    <form method="get" class="mb-3 row g-2" id="filterForm">
        <div class="col-md-4">
            <input type="text" name="searchTerm" class="form-control" placeholder="Search title, message, or consumer..." value="@searchTerm" />
        </div>
        <div class="col-md-3">
            <select name="selectedMonth" class="form-select">
                <option value="">All Months</option>
                @for (int m = 1; m <= 12; m++)
                {
                    var monthName = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m);
                    <option value="@m" selected="@(selectedMonth == m ? "selected" : null)">@monthName</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <select name="selectedYear" class="form-select">
                <option value="">All Years</option>
                @for (int y = DateTime.Now.Year; y >= DateTime.Now.Year - 5; y--)
                {
                    <option value="@y" selected="@(selectedYear == y ? "selected" : null)">@y</option>
                }
            </select>
        </div>
        <div class="col-md-auto">
            <button type="submit" class="btn btn-outline-primary"><i class="bi bi-search"></i> Filter</button>
        </div>
    </form>

    <!-- Table -->
    <div class="table-responsive">
        <table class="table table-bordered table-hover table-notifications">
            <thead class="table-light">
                <tr>
                    <th><i class="bi bi-person"></i> To</th>
                    <th><i class="bi bi-card-text"></i> Title</th>
                    <th><i class="bi bi-chat-left-text"></i> Message</th>
                    <th><i class="bi bi-calendar-event"></i> Date</th>
                    <th><i class="bi bi-tools"></i> Action</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Any())
                {
                    foreach (var n in Model)
                    {
                        <tr>
                            <td>@n.Consumer?.FullName</td> <!-- <-- Blank if null -->
                            <td>@n.Title</td>
                            <td>
                                @if (n.Message.Length <= previewLength)
                                {
                                    @n.Message
                                }
                                else
                                {
                                    <button type="button" class="btn btn-link text-decoration-none p-0" data-bs-toggle="modal" data-bs-target="#msgModal@n.Id">View Message</button>

                                    <div class="modal fade" id="msgModal@n.Id" tabindex="-1" aria-labelledby="msgModalLabel@n.Id" aria-hidden="true">
                                        <div class="modal-dialog modal-dialog-centered">
                                            <div class="modal-content shadow-lg border-0 rounded-4">
                                                <div class="modal-header bg-primary text-white rounded-top-4">
                                                    <h5 class="modal-title" id="msgModalLabel@n.Id">Message Details</h5>
                                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body p-4">
                                                    <p class="mb-2">@n.Message</p>
                                                    <p class="mb-2 text-muted">
                                                        <i class="bi bi-calendar-event me-1"></i>
                                                        <strong>Sent On:</strong> @n.CreatedAt.ToString("MMMM dd, yyyy hh:mm tt")
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </td>
                            <td>@n.CreatedAt.ToString("yyyy-MM-dd hh:mm tt")</td>
                            <td>
                                <form asp-action="Unarchive" method="post" style="display:inline">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@n.Id" />
                                    <input type="hidden" name="searchTerm" value="@searchTerm" />
                                    <input type="hidden" name="selectedMonth" value="@selectedMonth" />
                                    <input type="hidden" name="selectedYear" value="@selectedYear" />
                                    <input type="hidden" name="page" value="@currentPage" />
                                    <button type="submit" class="btn btn-info btn-sm"><i class="bi bi-arrow-clockwise"></i> Restore</button>
                                </form>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-muted text-center"><i class="bi bi-inbox"></i> No archived notifications found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    @if (Model.PageCount > 1)
    {
        <div class="d-flex justify-content-center mt-3">
            @Html.PagedListPager(Model, page => Url.Action("Archived", new
            {
                page,
                searchTerm = searchTerm,
                selectedMonth = selectedMonth,
                selectedYear = selectedYear
                }), new PagedListRenderOptions
            {
                DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                DisplayLinkToNextPage = PagedListDisplayMode.Always,
                DisplayLinkToFirstPage = PagedListDisplayMode.Always,
                DisplayLinkToLastPage = PagedListDisplayMode.Always,
                MaximumPageNumbersToDisplay = 5,
                LiElementClasses = new[] { "page-item" },
                PageClasses = new[] { "page-link" }
            })
    </div>
        }
</div>
